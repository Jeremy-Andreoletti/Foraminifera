select(-prop_obs) %>%
mutate(pres=1) %>%
spread(Biogeography,pres,fill=0)
source("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Script_classification_hemisphere.R", echo=TRUE)
# Loading libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(leaflet)
library(writexl)
setwd("Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/")
# Loading libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(leaflet)
library(writexl)
#setwd("Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/")
# Place the files in the same folde as the script
# Import data
Occurences_MOTUs <- readxl::read_xlsx(path = "Table S7.xlsx", sheet = 1, col_types="guess")
Env_data         <- readxl::read_xlsx(path = "Table S4.xlsx", sheet = 1, col_types="guess")
# Recode Ocean Basin to have only 5 categories
# 1-Northern Hemisphere
# 2-Southern Hemisphere
# First fix the biogeography
Biogeography_data <- Env_data %>% select(`Original Sample ID`, Averaged_Latitude, Averaged_Longitude, Province_Spalding_simplified_01) %>%
dplyr::rename("Biogeography" = "Province_Spalding_simplified_01", "latitude" = "Averaged_Latitude", "longitude" = "Averaged_Longitude")
# Create a color palette
pal <- colorFactor(palette = c("#1B9E77", "#7B2E77", "#D95F02", "#7570B3", "#E7298A", "#E6CA00", "#A6AA50", "#1151B1", "#A6A1A1"), domain = Biogeography_data$Biogeography)
# Create a map to check
leaflet(Biogeography_data) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(~longitude, ~latitude, color = ~pal(Biogeography), radius = 1) %>%
addLegend("bottomright", pal = pal, values = ~Biogeography,
title = "Biogeography")
# Now create an occurrence of MOTUs lvl-2 by hemisphere
Occurences_MOTUs_hemisphere <- Biogeography_data %>%
left_join(Occurences_MOTUs %>%
select(`Original Sample ID`, TP_lvl2) %>%
filter(TP_lvl2 != "Not_Attributed"), relationship = "many-to-many") %>% unique() %>% drop_na() %>%
group_by(Biogeography, TP_lvl2) %>%
count() %>%
spread(Biogeography,n,fill=0)
# Based on the raw count calculate % of observation
Occurences_MOTUs_hemisphere_prop <- Occurences_MOTUs_hemisphere %>%
column_to_rownames('TP_lvl2') %>%
as.matrix() %>%
prop.table(1) %>%
as.data.frame() %>%
rownames_to_column('TP_lvl2') %>%
gather(Biogeography, prop_obs, 2:6)
# Visualize proportion of occurrence by bins of 1%, and add a line to represent the selected threshold
# We start with a threshold at 5%
treshold <- 0.05
ggplot(Occurences_MOTUs_hemisphere_prop %>%
filter(prop_obs>0),
aes(x=prop_obs))+
geom_histogram(binwidth = 0.01,
fill="black",
col="grey")+
geom_vline(aes(xintercept = treshold), color = "red", linewidth = 1, linetype = "dashed")
#Filter out observation below the treshold and reconstruct the occurence table in presence/absence data
Data_hemisphere_filtered <- Occurences_MOTUs_hemisphere_prop %>%
filter(prop_obs >= treshold) %>%
select(-prop_obs) %>%
mutate(pres=1) %>%
spread(Biogeography,pres,fill=0)
#Export the data
write_xlsx(
Data_hemisphere_filtered %>% as.data.frame(),
path ="Occurence_Table_hemisphere.xlsx")
# Loading libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(leaflet)
library(writexl)
#setwd("Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/")
# Place the files in the same folde as the script
# Import data
Occurences_MOTUs <- readxl::read_xlsx(path = "Table S7.xlsx", sheet = 1, col_types="guess")
Env_data         <- readxl::read_xlsx(path = "Table S4.xlsx", sheet = 1, col_types="guess")
# Recode Ocean Basin to have only 7 categories
# First fix the biogeography
Biogeography_data <- Env_data %>% select(`Original Sample ID`, Averaged_Latitude, Averaged_Longitude, Province_Spalding_simplified_01) %>%
dplyr::rename("Biogeography" = "Province_Spalding_simplified_01", "latitude" = "Averaged_Latitude", "longitude" = "Averaged_Longitude")
# Create a color palette
pal <- colorFactor(palette = c("#1B9E77", "#7B2E77", "#D95F02", "#7570B3", "#E7298A", "#E6CA00", "#A6AA50", "#1151B1", "#A6A1A1"), domain = Biogeography_data$Biogeography)
# Create a map to check
leaflet(Biogeography_data) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(~longitude, ~latitude, color = ~pal(Biogeography), radius = 1) %>%
addLegend("bottomright", pal = pal, values = ~Biogeography,
title = "Biogeography")
# Now create an occurrence of MOTUs lvl-2 by region
Occurences_MOTUs_biogeography <- Biogeography_data %>%
left_join(Occurences_MOTUs %>%
select(`Original Sample ID`, TP_lvl2) %>%
filter(TP_lvl2 != "Not_Attributed"), relationship = "many-to-many") %>% unique() %>% drop_na() %>%
group_by(Biogeography, TP_lvl2) %>%
count() %>%
spread(Biogeography,n,fill=0)
# Based on the raw count calculate % of observation
Occurences_MOTUs_biogeography_prop <- Occurences_MOTUs_biogeography %>%
column_to_rownames('TP_lvl2') %>%
as.matrix() %>%
prop.table(1) %>%
as.data.frame() %>%
rownames_to_column('TP_lvl2') %>%
gather(Biogeography, prop_obs, 2:6)
# Visualize proportion of occurrence by bins of 1%, and add a line to represent the selected threshold
# We start with a threshold at 5%
treshold <- 0.05
ggplot(Occurences_MOTUs_biogeography_prop %>%
filter(prop_obs>0),
aes(x=prop_obs))+
geom_histogram(binwidth = 0.01,
fill="black",
col="grey")+
geom_vline(aes(xintercept = treshold), color = "red", linewidth = 1, linetype = "dashed")
#Filter out observation below the treshold and reconstruct the occurence table in presence/absence data
Data_biogeo_filtered <- Occurences_MOTUs_biogeography_prop %>%
filter(prop_obs >= treshold) %>%
select(-prop_obs) %>%
mutate(pres=1) %>%
spread(Biogeography,pres,fill=0)
#Export the data
write_xlsx(
Data_biogeo_filtered %>% as.data.frame(),
path ="Occurence_Table_7regions.xlsx")
Occurences_MOTUs_biogeography
Occurences_MOTUs_biogeography_prop
Occurences_MOTUs_biogeography
Occurences_MOTUs_biogeography_prop
# Based on the raw count calculate % of observation
Occurences_MOTUs_biogeography_prop <- Occurences_MOTUs_biogeography %>%
column_to_rownames('TP_lvl2') %>%
as.matrix() %>%
prop.table(1) %>%
as.data.frame() %>%
rownames_to_column('TP_lvl2') %>%
gather(Biogeography, prop_obs, 2:10)
Occurences_MOTUs_biogeography_prop
# Visualize proportion of occurrence by bins of 1%, and add a line to represent the selected threshold
# We start with a threshold at 5%
treshold <- 0.05
ggplot(Occurences_MOTUs_biogeography_prop %>%
filter(prop_obs>0),
aes(x=prop_obs))+
geom_histogram(binwidth = 0.01,
fill="black",
col="grey")+
geom_vline(aes(xintercept = treshold), color = "red", linewidth = 1, linetype = "dashed")
#Filter out observation below the treshold and reconstruct the occurence table in presence/absence data
Data_biogeo_filtered <- Occurences_MOTUs_biogeography_prop %>%
filter(prop_obs >= treshold) %>%
select(-prop_obs) %>%
mutate(pres=1) %>%
spread(Biogeography,pres,fill=0)
#Export the data
write_xlsx(
Data_biogeo_filtered %>% as.data.frame(),
path ="Occurence_Table_7regions.xlsx")
biogeography <- readxl::read_xlsx("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Occurence_Table_9regions.xlsx")
biogeography
open("../../TritonDB/triton.RData")
load("../../TritonDB/triton.RData")
triton[grepl("riedlei", triton$species),]
triton[grepl("orcadia", triton$species),]
head(triton$species)
triton[grepl("Acarinina", triton$species),]
triton[grepl("adamsi", triton$species),]
triton[grepl("riedeli", triton$species),]
triton[grepl("riedeli", triton$species),c("pal.lat", "pal.long")]
plot(triton[grepl("riedeli", triton$species),c("pal.lat", "pal.long")])
plot(triton[grepl("riedeli", triton$species),c("pal.lat", "pal.long")])
plot(triton[grepl("riedeli", triton$species),c("pal.long", "pal.lat")])
plot(triton[grepl("adamsi", triton$species),c("pal.long", "pal.lat")])
plot(triton[grepl("adamsi", triton$species) & triton$age > 5,c("pal.long", "pal.lat")])
plot(triton[grepl("adamsi", triton$species) & triton$age < 5,c("pal.long", "pal.lat")])
plot(triton[grepl("adamsi", triton$species) & triton$age < 1,c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 1, c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.5, c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.1, c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.01, c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.01, "age"])
triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.01, "age"]
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age < 0.01, c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")])
plot(triton[grepl("Orcadia riedeli", triton$species) & triton$age == 0, c("pal.long", "pal.lat")])
plot(triton[grepl("Orcadia riedeli", triton$species) & triton$age < 5, c("pal.long", "pal.lat")])
plot(triton[grepl("Orcadia riedeli", triton$species), c("pal.long", "pal.lat")])
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")])
points(triton[grepl("Orcadia riedeli", triton$species), c("pal.long", "pal.lat")], color="red")
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=5)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=1)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=2)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=11)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=12)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=21)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=20)
points(triton[grepl("Orcadia riedeli", triton$species), c("pal.long", "pal.lat")], color="red")
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=20, alpha+0.1)
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=20, col="gray")
points(triton[grepl("Orcadia riedeli", triton$species), c("pal.long", "pal.lat")], color="red")
points(triton[grepl("Orcadia riedeli", triton$species), c("pal.long", "pal.lat")], col="red")
plot(triton[grepl("Globigerinella adamsi", triton$species) & triton$age == 0, c("pal.long", "pal.lat")], pch=20, col="gray")
points(triton[grepl("Orcadia riedeli", triton$species) & triton$age < 1, c("pal.long", "pal.lat")], col="red")
trait.plot(Spinose_tree, state_data, cols = cols, str = labels, legend = TRUE, cex.lab = 0.5, cex.legend = 0.75)
# Load biogeographical regions
nb_of_regions = 9   # 5 or 9 regions
if (nb_of_regions == 5){
biogeography <- readxl::read_xlsx("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Occurence_Table.xlsx")
biogeography <- rbind(biogeography, c("Spinose|Globigerinella|adamsi|I|a", 0, 0, 1, 0, 0))
biogeography <- rbind(biogeography, c("Spinose|Orcadia|riedeli|I|a", 0, 0, 1, 0, 0))
}else if (nb_of_regions == 9){
biogeography <- readxl::read_xlsx("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Occurence_Table_9regions.xlsx")
biogeography <- rbind(biogeography, c("Spinose|Globigerinella|adamsi|I|a", 0, 0, 0, 0, 1, 1, 1, 0, 0))
biogeography <- rbind(biogeography, c("Spinose|Orcadia|riedeli|I|a", 0, 0, 0, 0, 1, 1, 1, 0, 0))
}else(
warning("Invalid number of regions")
)
biogeographyS <- biogeography[grep("Spinose", biogeography$TP_lvl2),]
biogeographyS$TP_lvl2 <- gsub("\\|", "_", gsub("I\\|", "I", gsub("Spinose\\|", "", biogeographyS$TP_lvl2)))
biogeographyS
# Match to the species in the phylogeny
biogeographyS <- lapply(Spinose_tree$tip.label, function(sp){
if (!(sp %in% biogeographyS$TP_lvl2))
return(c(sp,rep(NA,ncol(biogeographyS)-1)))
else
return(biogeographyS[biogeographyS$TP_lvl2 == sp,])
})
biogeographyS <- Reduce(rbind, biogeographyS)
biogeographyS[2:ncol(biogeographyS)] <- sapply(biogeographyS[2:ncol(biogeographyS)], as.numeric)
biogeographyS
names(biogeographyS)
# Create a map to check
leaflet(Biogeography_data) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(~longitude, ~latitude, color = ~pal(Biogeography), radius = 1) %>%
addLegend("bottomright", pal = pal, values = ~Biogeography,
title = "Biogeography")
# Format for SSE analyses
if (nb_of_regions == 5){
biogeographyS <- biogeographyS %>%
mutate(warm = `02_Tropical-SubTropical_Atlantic` | `03_Tropical-SubTropical_IndoPacific`,
cold = `01_Arctic_Atlantic-Subarctic` | `04_Subarctic-Pacific` | `05_Southern_cold_water`)
biogeographyS_sse <- biogeographyS %>%
mutate(range = case_when(
warm == 1 & cold == 1 ~ 0,  # Widespread (0)
warm == 1 & cold == 0 ~ 1,  # Endemic to warm waters (1)
warm == 0 & cold == 1 ~ 2,  # Endemic to cold waters (2)
TRUE ~ NA_real_               # NA for invalid cases
)) %>%
select(TP_lvl2, range)
}else{
biogeographyS <- biogeographyS %>%
mutate(north = `01_Arctic_Atlantic-Subarctic` | `02_North-Atlantic` | `03_Mediterranean` | `06_North-Pacific` | `08_Subarctic-Pacific`,
south = `04_South-Atlantic` | `05_Indian-Ocean` | `07_South-Pacific` | `09_Southern_cold_water`)
biogeographyS_sse <- biogeographyS %>%
mutate(range = case_when(
north == 1 & south == 1 ~ 0,  # Widespread (0)
north == 1 & south == 0 ~ 1,  # Endemic to northern hemisphere (1)
north == 0 & south == 1 ~ 2,  # Endemic to southern hemisphere (2)
TRUE ~ NA_real_               # NA for invalid cases
)) %>%
select(TP_lvl2, range)
}
biogeographyS_sse
print(northern hemisphere, n=50)
print(biogeographyS_sse, n=50)
# Format biogeography for GeoSSE
biogeographyS_sse <- biogeographyS_sse %>%
rename(taxon = TP_lvl2, state = range) %>%
as.data.frame()
# Print the formatted biogeography
print(biogeographyS_sse)
# Remove rows with NA in the state column
biogeographyS_sse_noNA <- biogeographyS_sse %>%
filter(!is.na(state))
# Ensure all tips in the tree are present in the state_data
missing_tips <- setdiff(Spinose_tree$tip.label, biogeographyS_sse_noNA$taxon)
if (length(missing_tips) > 0) {
warning("The following tips are missing from the biogeography data and will be excluded: ", paste(missing_tips, collapse = ", "))
}
Spinose_tree_noNA <- drop.tip(Spinose_tree, tip = missing_tips)
# Visualize the tree with states
state_data <- setNames(biogeographyS_sse$state, biogeographyS_sse$taxon)
state_data <- state_data[Spinose_tree$tip.label]
state_data <- data.frame(state = state_data, row.names = names(state_data))
cols <- list(state = c("0" = "darkmagenta", "1" = "firebrick2", "2" = "dodgerblue"))
ifelse(nb_of_regions == 5, c("0" = "Widespread", "1" = "Warm Endemic", "2" = "Cold Endemic"), c("0" = "Widespread", "1" = "Northern Hemisphere", "2" = "Southern Hemisphere"))
nb_of_regions
if (nb_of_regions == 5){
labels <- list(state = c("0" = "Widespread", "1" = "Warm Endemic", "2" = "Cold Endemic"))
}else{
labels <- list(state = c("0" = "Widespread", "1" = "Northern Hemisphere", "2" = "Southern Hemisphere"))
}
labels
trait.plot(Spinose_tree, state_data, cols = cols, str = labels, legend = TRUE, cex.lab = 0.5, cex.legend = 0.75)
paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Figures/geographical_states_Spinose_", method, "_", nb_of_regions, "region_Phylo.pdf")
pdf(paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Figures/geographical_states_Spinose_", method, "_", nb_of_regions, "regions_Phylo.pdf"))
trait.plot(Spinose_tree, state_data, cols = cols, str = labels, legend = TRUE, cex.lab = 0.5, cex.legend = 0.75)
dev.off()
paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Output/model_comparison_Spinose_", method, "_", nb_of_regions, "regions_Phylo.csv")
source("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Forams_GeoSSE_GeoHiSSE_MiSSE.R", echo=TRUE)
mod_geosse_3
?mod_geosse_3
?GeoHiSSE
mod_geosse_3$hidden.states
mod_geosse_3$trans.matrix
mod_geosse_3$solution
mod_geosse_3$index.par
mod_geosse_3$solution[1:10]
trans_rate_geosse_3
?TransMatMakerGeoHiSSE
TransMatMakerGeoHiSSE(hidden.traits = 0)
TransMatMakerGeoHiSSE(hidden.traits = 0, include.jumps=T)
TransMatMakerGeoHiSSE(hidden.traits = 0, separate.extirpation=T)
c(mod_geosse_3$solution["tau00A"])
c(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1))
c(lambda_00 = mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1), )
c(lambda_00 = mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1))
c(lambda_00 = mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1list)
list(lambda_00 = mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)
)
c(lambda_00 = as.numeric(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)))
c(lambda_00 = as.numeric(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)),
lambda_11 = as.numeric(mod_geosse_3$solution["tau11A"]/(mod_geosse_3$solution["ef11A"]+1)),
mu_00 = as.numeric(mod_geosse_3$solution["tau00A"]*mod_geosse_3$solution["ef00A"]/(mod_geosse_3$solution["ef00A"]+1)),
mu_11 = as.numeric(mod_geosse_3$solution["tau11A"]*mod_geosse_3$solution["ef11A"]/(mod_geosse_3$solution["ef11A"]+1)), )
c(lambda_00 = as.numeric(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)),
lambda_11 = as.numeric(mod_geosse_3$solution["tau11A"]/(mod_geosse_3$solution["ef11A"]+1)),
mu_00 = as.numeric(mod_geosse_3$solution["tau00A"]*mod_geosse_3$solution["ef00A"]/(mod_geosse_3$solution["ef00A"]+1)),
mu_11 = as.numeric(mod_geosse_3$solution["tau11A"]*mod_geosse_3$solution["ef11A"]/(mod_geosse_3$solution["ef11A"]+1)))
mod_geosse_3$solution[mod_geosse_3$solution != 0]
# Best model paramerter values
mod_geosse_3
c(lambda_00 = as.numeric(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)),
lambda_11 = as.numeric(mod_geosse_3$solution["tau11A"]/(mod_geosse_3$solution["ef11A"]+1)),
mu_00 = as.numeric(mod_geosse_3$solution["tau00A"]*mod_geosse_3$solution["ef00A"]/(mod_geosse_3$solution["ef00A"]+1)),
mu_11 = as.numeric(mod_geosse_3$solution["tau11A"]*mod_geosse_3$solution["ef11A"]/(mod_geosse_3$solution["ef11A"]+1)))
save(models, file = paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Output/models_Spinose_", method, "_", nb_of_regions, "regions_Phylo.RData"))
debugSource("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Forams_GeoSSE_GeoHiSSE_MiSSE.R", echo=TRUE)
Q
model_names <- c("CID",
"Full GeoSSE",
"GeoSSE with x0 = x1",
"GeoSSE with d0 = d1",
"Anagenetic GeoSSE with s01 = 0",
"Anagenetic GeoSSE with x0 = x1 and s01 = 0",
"GeoSSE with s01 = s0 = s1",
"GeoSSE with x0 = x1 and s01 = s0 = s1",
"Full GeoHiSSE",
"GeoHiSSE with x0A = x0B = x1A = x1B",
"GeoHiSSE with x0A = x0B = x1A = x1B and d0 = d1",
"GeoHiSSE with no range-dependent diversification",
"GeoHiSSE with no range-dependent diversification and s01 = s0 = s1",
"GeoHiSSE with no range-dependent diversification and s01 = s0 = s1 and xA = xB",
"GeoHiSSE with no range-dependent diversification and d0 = d1",
"GeoHiSSE with no range-dependent diversification and s01 = s0 = s1 and xA = xB and d0 = d1",
"Anagenetic GeoHiSSE with x0A = x0B = x1A = x1B and s01 = 0",
"Anagenetic GeoHiSSE with x0A = x0B = x1A = x1B and s01 = 0 and dA = dB")
names(models) <- model_names
save(models, file = paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Output/models_Spinose_", method, "_", nb_of_regions, "regions_Phylo.RData"))
aicc_values <- sapply(models, function(model) model$AICc)
names(aicc_values) <- model_names
# Print AICc values
print(aicc_values)
# Calculate Akaike weights
akaike_weights <- exp(-0.5 * (aicc_values - min(aicc_values)))
akaike_weights <- round(akaike_weights / sum(akaike_weights), 2)
print(akaike_weights)
# Rank models based on AICc values
aicc_ranks <- rank(aicc_values)
names(aicc_ranks) <- model_names
print(aicc_ranks)
# Best model paramerter values
mod_geosse_3
c(lambda_00 = as.numeric(mod_geosse_3$solution["tau00A"]/(mod_geosse_3$solution["ef00A"]+1)),
lambda_11 = as.numeric(mod_geosse_3$solution["tau11A"]/(mod_geosse_3$solution["ef11A"]+1)),
mu_00 = as.numeric(mod_geosse_3$solution["tau00A"]*mod_geosse_3$solution["ef00A"]/(mod_geosse_3$solution["ef00A"]+1)),
mu_11 = as.numeric(mod_geosse_3$solution["tau11A"]*mod_geosse_3$solution["ef11A"]/(mod_geosse_3$solution["ef11A"]+1)))
models
results
# Best model parameter values
mod_geosse_6
c(lambda_00 = as.numeric(best_model$solution["tau00A"]/(best_model$solution["ef00A"]+1)),
lambda_11 = as.numeric(best_model$solution["tau11A"]/(best_model$solution["ef11A"]+1)),
mu_00 = as.numeric(best_model$solution["tau00A"]*best_model$solution["ef00A"]/(best_model$solution["ef00A"]+1)),
mu_11 = as.numeric(best_model$solution["tau11A"]*best_model$solution["ef11A"]/(best_model$solution["ef11A"]+1)))
# Best model parameter values
best_model <- mod_geosse_6
best_model
c(lambda_00 = as.numeric(best_model$solution["tau00A"]/(best_model$solution["ef00A"]+1)),
lambda_11 = as.numeric(best_model$solution["tau11A"]/(best_model$solution["ef11A"]+1)),
mu_00 = as.numeric(best_model$solution["tau00A"]*best_model$solution["ef00A"]/(best_model$solution["ef00A"]+1)),
mu_11 = as.numeric(best_model$solution["tau11A"]*best_model$solution["ef11A"]/(best_model$solution["ef11A"]+1)))
debugSource("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Forams_GeoSSE_GeoHiSSE_MiSSE.R", echo=TRUE)
results
# Save results to a CSV file
results <- data.frame(Model = model_names, AICc = aicc_values, AkaikeWeight = akaike_weights, Rank = aicc_ranks)
print(results)
write.csv(results, paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Output/model_comparison_Spinose_", method, "_", nb_of_regions, "regions_Phylo.csv"), row.names = FALSE)
# plot average rates across the best models
recon.models <- lapply(models[which(aicc_ranks %in% 1:5)], function(mod){
MarginReconGeoSSE(phy = mod$phy, data = mod$data, f = mod$f,
pars = mod$solution, hidden.states = 1,
root.type = mod$root.type, root.p = mod$root.p,
AIC = mod$AIC, n.cores = 4)
})
model.ave.rates <- GetModelAveRates(x = recon.models, type = "tips")
out <- plot.geohisse.states(x = recon.models, rate.param = "net.div", type = "fan",
show.tip.label = T, legend = F, fsize=0.8)
pdf(paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Figures/average_rates_Spinose_", method, "_", nb_of_regions, "regions_Phylo.pdf"))
plot.geohisse.states(x = recon.models, rate.param = "net.div", type = "fan",
show.tip.label = T, legend = T, fsize=0.5)
dev.off()
library(ape)
library(phytools)
library(dplyr)
library(tidyverse)
library(ggtree)
Spinose_tree <- read.tree("~/Nextcloud/Recherche/2_Plankton/Forams/Data_processing/Phylogenies/Modified_OBDP_Spinose_phylogeny.tre")
# Load biogeographical regions
biogeography <- readxl::read_xlsx("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Occurence_Table.xlsx")
biogeography <- rbind(biogeography, c("Spinose|Globigerinella|adamsi|I|a", 0, 0, 1, 0, 0))
biogeography <- rbind(biogeography, c("Spinose|Orcadia|riedeli|I|a", 0, 0, 1, 0, 0))
biogeographyS <- biogeography[grep("Spinose", biogeography$TP_lvl2),]
biogeographyS$TP_lvl2 <- gsub("\\|", "_", gsub("I\\|", "I", gsub("Spinose\\|", "", biogeographyS$TP_lvl2)))
# Match to the species in the phylogeny
biogeographyS <- lapply(Spinose_tree$tip.label, function(sp){
if (!(sp %in% biogeographyS$TP_lvl2))
return(c(sp,rep(NA,ncol(biogeographyS)-1)))
else
return(biogeographyS[biogeographyS$TP_lvl2 == sp,])
})
biogeographyS <- Reduce(rbind, biogeographyS)
biogeographyS[2:ncol(biogeographyS)] <- sapply(biogeographyS[2:ncol(biogeographyS)], as.numeric)
biogeographyS_ESSE <- biogeographyS %>%
mutate(tropical = as.double(`02_Tropical-SubTropical_Atlantic` | `03_Tropical-SubTropical_IndoPacific`),
cold_north = as.double(`01_Arctic_Atlantic-Subarctic` | `04_Subarctic-Pacific`),
cold_south = `05_Southern_cold_water`) %>%
select(TP_lvl2, cold_north, tropical, cold_south)
print(biogeographyS_ESSE)
biogeography_traits <- biogeographyS_ESSE %>%
select(-TP_lvl2) %>%
as.data.frame()
rownames(biogeography_traits) <- biogeographyS_ESSE$TP_lvl2
diversitree::trait.plot(Spinose_tree, biogeography_traits,
cols=list(cold_north=c("grey90", "darkblue"), tropical=c("grey90", "red3"), cold_south=c("grey90", "skyblue")),
cex.lab=0.7,
cex.legend=0.7)
library(ape)
library(phytools)
library(dplyr)
library(tidyverse)
library(ggtree)
# Load the phylogenetic tree
method = "literature"  # choose the method for phylogenetic reconstruction and dating, among "fbdrp", "obdp" and "literature"
if (method == "fbdrp"){
Spinose_trees <- read.tree("/Volumes/data/RevBayes/FBDRP/output/forams_Spinose.trees", keep.multi = TRUE)
Spinose_tree <- phangorn::maxCladeCred(Spinose_trees[500:length(Spinose_trees)])
}else if (method == "obdp"){
Spinose_trees <- read.tree("/Volumes/data/RevBayes/OBDP/output/forams_Spinose.trees", keep.multi = TRUE)
Spinose_tree <- phangorn::maxCladeCred(Spinose_trees[250:length(Spinose_trees)])
write.tree(Spinose_tree, "/Volumes/data/RevBayes/OBDP/output/forams_Spinose_mcc.tree")
}else if (method == "literature"){
Spinose_tree <- read.tree("~/Nextcloud/Recherche/2_Plankton/Forams/Data_processing/Phylogenies/Modified_OBDP_Spinose_phylogeny.tre")
}
# Load biogeographical regions
biogeography <- readxl::read_xlsx("~/Nextcloud/Recherche/2_Plankton/Forams/Data/Data_Morard/Biogeography/Occurence_Table.xlsx")
biogeography <- rbind(biogeography, c("Spinose|Globigerinella|adamsi|I|a", 0, 0, 1, 0, 0))
biogeography <- rbind(biogeography, c("Spinose|Orcadia|riedeli|I|a", 0, 0, 1, 0, 0))
biogeographyS <- biogeography[grep("Spinose", biogeography$TP_lvl2),]
biogeographyS$TP_lvl2 <- gsub("\\|", "_", gsub("I\\|", "I", gsub("Spinose\\|", "", biogeographyS$TP_lvl2)))
# Match to the species in the phylogeny
biogeographyS <- lapply(Spinose_tree$tip.label, function(sp){
if (!(sp %in% biogeographyS$TP_lvl2))
return(c(sp,rep(NA,ncol(biogeographyS)-1)))
else
return(biogeographyS[biogeographyS$TP_lvl2 == sp,])
})
biogeographyS <- Reduce(rbind, biogeographyS)
biogeographyS[2:ncol(biogeographyS)] <- sapply(biogeographyS[2:ncol(biogeographyS)], as.numeric)
biogeographyS_ESSE <- biogeographyS %>%
mutate(tropical = as.double(`02_Tropical-SubTropical_Atlantic` | `03_Tropical-SubTropical_IndoPacific`),
cold_north = as.double(`01_Arctic_Atlantic-Subarctic` | `04_Subarctic-Pacific`),
cold_south = `05_Southern_cold_water`) %>%
select(TP_lvl2, cold_north, tropical, cold_south)
print(biogeographyS_ESSE)
write.table(biogeographyS_ESSE,
"~/Nextcloud/Recherche/2_Plankton/Forams/Data_processing/Biogeography/Spinose_biogeo_North_Tropics_South.txt",
col.names = F, row.names = F, quote = F)
# Plot biogeography on the phylogeny
biogeography_traits <- biogeographyS_ESSE %>%
select(-TP_lvl2) %>%
as.data.frame()
rownames(biogeography_traits) <- biogeographyS_ESSE$TP_lvl2
pdf(paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/GeoSSE/Figures/geographical_states_Spinose_", method, "_NorthTropicalSouth_Phylo.pdf"))
diversitree::trait.plot(Spinose_tree, biogeography_traits,
cols=list(cold_north=c("grey90", "darkblue"), tropical=c("grey90", "red3"), cold_south=c("grey90", "skyblue")),
cex.lab=0.7,
cex.legend=0.7)
dev.off()
pdf(paste0("~/Nextcloud/Recherche/2_Plankton/Forams/Analyses/ESSE/Figures/geographical_states_Spinose_", method, "_NorthTropicalSouth_Phylo.pdf"))
diversitree::trait.plot(Spinose_tree, biogeography_traits,
cols=list(cold_north=c("grey90", "darkblue"), tropical=c("grey90", "red3"), cold_south=c("grey90", "skyblue")),
cex.lab=0.7,
cex.legend=0.7)
dev.off()
